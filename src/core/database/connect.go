package database

import (
	"fmt"
	"net/http"
	"os"
	"sme-backend/src/core/config"
	"sme-backend/src/enums/context_keys"
	"sme-backend/src/enums/dev_modes"
	"strconv"
	"strings"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

var (
	ADMIN_DB       *gorm.DB
	CONTEXT_API_DB *gorm.DB
)

func GetRlsContextDB(request *http.Request) *gorm.DB {
	return request.Context().Value(context_keys.DB).(*gorm.DB)
}

func ConnectDB() {
	p := config.Config("DB_PORT")
	port, err := strconv.ParseUint(p, 10, 32)
	if err != nil {
		panic("failed to parse database port")
	}

	host := config.Config("DB_HOST")
	dbname := config.Config("DB_NAME")
	sslmode := config.Config("SSL_MODE")

	// Below For "API USER" rls role.
	api_user := config.Config("DB_USERNAME")
	api_password := config.Config("DB_PASSWORD")

	api_user_dsn := fmt.Sprintf(`user=%s password=%s host=%s port=%d dbname=%s sslmode=%s`, api_user, api_password, host, port, dbname, sslmode)

	if config.Config("DEV_MODE") == dev_modes.PROD {
		//  This certificate is generated by the Supabase team and is used to verify the connection to the database.
		//  It is important to use a valid certificate to ensure the security of your application.
		db_certificate_path := config.Config("DB_SSL_CERTIFICATE")

		// Check if the environment variable is empty
		if db_certificate_path == "" {
			panic("DB_SSL_CERTIFICATE is not set")
		}
		// Replace `\n` (escaped newlines) with actual newlines
		db_certificate_path = strings.ReplaceAll(db_certificate_path, `\n`, "\n")

		filePath := "supabase-ssl-certificate.cer"
		err := os.WriteFile(filePath, []byte(db_certificate_path), 0644)
		if err != nil {
			panic("Unable to write file for SSL certificate")
		}

		api_user_dsn = fmt.Sprintf(`%s sslrootcert=%s`, api_user_dsn, filePath)
	}

	api_db, api_user_err := gorm.Open(postgres.Open(api_user_dsn), &gorm.Config{
		Logger:         logger.Default.LogMode(logger.Warn),
		TranslateError: true,
		PrepareStmt:    false,
	})

	if api_user_err != nil {
		panic("Failed to connect database as api_user")
	}

	sqlDB, err := api_db.DB()
	if err != nil {
		panic(err)
	}

	sqlDB.SetMaxIdleConns(10)
	sqlDB.SetMaxOpenConns(200)
	sqlDB.SetConnMaxLifetime(time.Hour)

	ADMIN_DB = api_db
	CONTEXT_API_DB = api_db
	fmt.Println("Database successfully connected")
}
